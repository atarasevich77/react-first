{"version":3,"sources":["components/Logo.js","components/Header.js","components/Footer.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Logo","className","menu","TopMenu","map","value","index","key","item","Component","TopMenuItems","url","this","props","toLowerCase","trim","replace","href","Header","footerMenu","FooterMenu","block","FooterMenuBlocks","Footer","ContentRightBlock","ContentCentralBlock","ContentLeftBlock","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAUeA,MARf,WACI,OACI,yBAAKC,UAAU,QAAf,SCDFC,EAAO,CACT,iBACA,iBACA,iBACA,kBAGEC,E,uKAEE,OACI,yBAAKF,UAAU,gBACVC,EAAKE,KAAI,SAACC,EAAOC,GACd,OAAO,0BAAMC,IAAKD,GAAO,kBAAC,EAAD,CAAcE,KAAMH,a,GAL3CI,aAYhBC,E,uKAEE,IAAMC,EAAM,IAAMC,KAAKC,MAAML,KAAKM,cAAcC,OAAOC,QAAQ,IAAK,KACpE,OACI,uBAAGC,KAAMN,GAAMC,KAAKC,MAAML,U,GAJXC,aAkBZS,MATf,WACI,OACI,yBAAKjB,UAAU,UACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCjCNkB,EAAa,CACf,UACA,UACA,UACA,WAGEC,E,uKAEE,OACI,yBAAKnB,UAAU,UACVkB,EAAWf,KAAI,SAACC,EAAOC,GACpB,OAAO,0BAAML,UAAU,QAAQM,IAAKD,GAAO,kBAAC,EAAD,CAAkBe,MAAOhB,a,GAL/DI,aAYnBa,E,uKAEE,OAAOV,KAAKC,MAAMQ,U,GAFKZ,aAYhBc,MANf,WACI,OACI,kBAAC,EAAD,OC3BFC,E,uKAEE,OACI,yBAAKvB,UAAU,cAAf,mH,GAHoBQ,aAc1BgB,E,uKAEE,OACI,yBAAKxB,UAAU,QACX,2CACA,sEACA,8LAGA,wK,GATkBQ,aAiB5BiB,E,uKAEE,OACI,yBAAKzB,UAAU,aACX,4BACI,0CACA,0CACA,0CACA,0CACA,gD,GATWQ,aA0BhBkB,MAVf,WACI,OACI,yBAAK1B,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCnCG2B,MAbf,WACI,OAEI,yBAAK3B,UAAU,OACX,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCFQ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f32b599a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Logo() {\n    return (\n        <div className=\"logo\">\n            Logo\n        </div>\n    );\n}\n\nexport default Logo;\n","import React, {Component} from 'react';\nimport Logo from \"./Logo\";\n\nconst menu = [\n    \"TopMenu Item 1\",\n    \"TopMenu Item 2\",\n    \"TopMenu Item 3\",\n    \"TopMenu Item 4\"\n];\n\nclass TopMenu extends Component{\n    render() {\n        return (\n            <div className=\"header-right\">\n                {menu.map((value, index)=>{\n                    return <span key={index}><TopMenuItems item={value} /></span>\n                })}\n            </div>\n        );\n    }\n}\n\nclass TopMenuItems extends Component{\n    render() {\n        const url = \"/\" + this.props.item.toLowerCase().trim().replace(\" \", \"-\");\n        return (\n            <a href={url}>{this.props.item}</a>\n        );\n    }\n}\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <Logo />\n            <TopMenu />\n        </div>\n    );\n}\n\nexport default Header;\n","import React, {Component} from 'react';\n\nconst footerMenu = [\n    \"Block 1\",\n    \"Block 2\",\n    \"Block 3\",\n    \"Block 4\",\n];\n\nclass FooterMenu extends Component{\n    render() {\n        return(\n            <div className=\"footer\">\n                {footerMenu.map((value, index)=>{\n                    return <span className=\"block\" key={index}><FooterMenuBlocks block={value}/></span>\n                })}\n            </div>\n        );\n    }\n}\n\nclass FooterMenuBlocks extends Component{\n    render() {\n        return this.props.block;\n    }\n}\n\nfunction Footer() {\n    return (\n        <FooterMenu />\n    );\n}\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass ContentRightBlock extends Component{\n    render() {\n        return (\n            <div className=\"right-side\">\n                    asdasdad fad, sd as d\n                    asd asd  adsdasda asd\n                    asdasd asdasd, asdasd\n                    asdsa asdas asd as\n                    asdasd, as das ds  sd.\n            </div>\n        );\n    }\n}\n\nclass ContentCentralBlock extends Component{\n    render() {\n        return (\n            <div className=\"main\">\n                <h1>asdasdasdas</h1>\n                <p>asdda asdads asd ad asd as dasd asd asd</p>\n                <p>asdsad asdasd asdasdasdasffas fasfas fsafasfasfas\n                asfasfasfasfsafasfasfsa asfasfasf asfasfasfasf safasf\n                asfasfasfasf asfasf asf asfasf asf a sfasfas fas fasfa.</p>\n                <p>xcvvx xcvxv xcv f ds v xcv d gds b b xcbxb\n                xbcb cb  bcbx b cb b xcb xcb xc bxcb x\n                xcxcb xcbx cb xcbxcb xcbxcbxcb xcbxc bx cbxcbxbbc.</p>\n            </div>\n        );\n    }\n}\n\nclass ContentLeftBlock extends Component{\n    render() {\n        return (\n            <div className=\"left-side\">\n                <ul>\n                    <li>Left sub 1</li>\n                    <li>Left sub 2</li>\n                    <li>Left sub 3</li>\n                    <li>Left sub 4</li>\n                    <li>Left sub 5</li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nfunction Content() {\n    return (\n        <div className=\"App-content\">\n            <ContentLeftBlock />\n            <ContentCentralBlock />\n            <ContentRightBlock />\n        </div>\n    );\n}\n\nexport default Content;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Content from \"./components/Content\";\n\nfunction App() {\n    return (\n        //JSX format\n        <div className=\"App\">\n            <Header />\n\n            <Content />\n\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//JSX format\n//https://kano-kenji.github.io/react-first/\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}